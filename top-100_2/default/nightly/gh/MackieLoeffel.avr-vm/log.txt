[INFO] cloning repository MackieLoeffel/avr-vm
[INFO] running `"git" "clone" "--bare" "git://github.com/MackieLoeffel/avr-vm.git" "work\\cache\\sources\\gh\\MackieLoeffel\\avr-vm"`
[INFO] [stderr] Cloning into bare repository 'work\cache\sources\gh\MackieLoeffel\avr-vm'...
[INFO] running `"git" "clone" "work\\cache\\sources\\gh\\MackieLoeffel\\avr-vm" "work\\ex\\default\\sources\\nightly\\gh\\MackieLoeffel\\avr-vm"`
[INFO] [stderr] Cloning into 'work\ex\default\sources\nightly\gh\MackieLoeffel\avr-vm'...
[INFO] [stderr] done.
[INFO] running `"git" "clone" "work\\cache\\sources\\gh\\MackieLoeffel\\avr-vm" "work\\ex\\default\\sources\\nightly+rustflags=-Zverbose\\gh\\MackieLoeffel\\avr-vm"`
[INFO] [stderr] Cloning into 'work\ex\default\sources\nightly+rustflags=-Zverbose\gh\MackieLoeffel\avr-vm'...
[INFO] [stderr] done.
[INFO] running `"git" "rev-parse" "HEAD"`
[INFO] [stdout] fe2e47ecff03c9ecff8cf432a090a065ab85be3f
[INFO] sha for GitHub repo MackieLoeffel/avr-vm: fe2e47ecff03c9ecff8cf432a090a065ab85be3f
[INFO] validating manifest of MackieLoeffel/avr-vm on toolchain nightly
[INFO] running `"C:\\Users\\mackendy\\src\\crater\\work\\local\\cargo-home\\bin\\cargo.exe" "+nightly" "read-manifest" "--manifest-path" "Cargo.toml"`
[INFO] validating manifest of MackieLoeffel/avr-vm on toolchain nightly+rustflags=-Zverbose
[INFO] running `"C:\\Users\\mackendy\\src\\crater\\work\\local\\cargo-home\\bin\\cargo.exe" "+nightly" "read-manifest" "--manifest-path" "Cargo.toml"`
[INFO] started frobbing MackieLoeffel/avr-vm
[INFO] finished frobbing MackieLoeffel/avr-vm
[INFO] frobbed toml for MackieLoeffel/avr-vm written to work\ex\default\sources\nightly\gh\MackieLoeffel\avr-vm\Cargo.toml
[INFO] started frobbing MackieLoeffel/avr-vm
[INFO] finished frobbing MackieLoeffel/avr-vm
[INFO] frobbed toml for MackieLoeffel/avr-vm written to work\ex\default\sources\nightly+rustflags=-Zverbose\gh\MackieLoeffel\avr-vm\Cargo.toml
[INFO] crate MackieLoeffel/avr-vm already has a lockfile, it will not be regenerated
[INFO] running `"C:\\Users\\mackendy\\src\\crater\\work\\local\\cargo-home\\bin\\cargo.exe" "+nightly" "fetch" "--locked" "--manifest-path" "Cargo.toml"`
[INFO] [stderr]     Blocking waiting for file lock on package cache
[INFO] [stderr]     Blocking waiting for file lock on package cache
[INFO] [stderr]  Downloading crates ...
[INFO] [stderr]   Downloaded gtk v0.5.0
[INFO] [stderr]   Downloaded gobject-sys v0.7.0
[INFO] [stderr]   Downloaded pango-sys v0.7.0
[INFO] [stderr]   Downloaded gio-sys v0.7.0
[INFO] [stderr]   Downloaded glib-sys v0.7.0
[INFO] [stderr]   Downloaded gdk-pixbuf v0.5.0
[INFO] [stderr]   Downloaded pango v0.5.0
[INFO] [stderr]   Downloaded gtk-sys v0.7.0
[INFO] [stderr]   Downloaded gio v0.5.1
[INFO] [stderr]   Downloaded glib v0.6.0
[INFO] [stderr]   Downloaded cairo-rs v0.5.0
[INFO] [stderr]   Downloaded dynasmrt v0.2.3
[INFO] [stderr]   Downloaded dynasm v0.2.3
[INFO] [stderr]   Downloaded gdk-sys v0.7.0
[INFO] [stderr]   Downloaded gdk-pixbuf-sys v0.7.0
[INFO] [stderr]   Downloaded atk-sys v0.7.0
[INFO] [stderr]   Downloaded cairo-sys-rs v0.7.0
[INFO] [stderr]   Downloaded gdk v0.9.0
[INFO] running `"C:\\Users\\mackendy\\src\\crater\\work\\local\\cargo-home\\bin\\cargo.exe" "+nightly" "fetch" "--locked" "--manifest-path" "Cargo.toml"`
[INFO] [stderr]     Blocking waiting for file lock on package cache
[INFO] testing MackieLoeffel/avr-vm against nightly for default
[INFO] running `"docker" "create" "--mount" "type=bind,src=C:\\Users\\mackendy\\src\\crater\\work\\local\\target-dirs\\default\\worker-0\\nightly,dst=C:\\crater\\target" "--mount" "type=bind,src=C:\\Users\\mackendy\\src\\crater\\work\\ex\\default\\sources\\nightly\\gh\\MackieLoeffel\\avr-vm,dst=C:\\crater\\workdir,readonly" "--mount" "type=bind,src=C:\\Users\\mackendy\\src\\crater\\work\\local\\cargo-home,dst=C:\\crater\\cargo-home,readonly" "--mount" "type=bind,src=C:\\Users\\mackendy\\src\\crater\\work\\local\\rustup-home,dst=C:\\crater\\rustup-home,readonly" "-e" "SOURCE_DIR=C:\\crater\\workdir" "-e" "CARGO_TARGET_DIR=C:\\crater\\target" "-e" "CARGO_INCREMENTAL=0" "-e" "RUST_BACKTRACE=full" "-e" "RUSTFLAGS=--cap-lints=allow" "-e" "CARGO_HOME=C:\\crater\\cargo-home" "-e" "RUSTUP_HOME=C:\\crater\\rustup-home" "-w" "C:\\crater\\workdir" "-m" "1536M" "--network" "none" "--isolation=process" "crates-build-env-windows" "C:\\crater\\cargo-home\\bin\\cargo" "+nightly" "build" "--frozen"`
[INFO] [stdout] 0eb3d40ab8ad3d3abd80804e2465b4be6b3be1fc740ed143679624d0fbb4d293
[INFO] running `"docker" "start" "-a" "0eb3d40ab8ad3d3abd80804e2465b4be6b3be1fc740ed143679624d0fbb4d293"`
[INFO] [stderr]    Compiling libc v0.2.20
[INFO] [stderr]    Compiling winapi v0.3.6
[INFO] [stderr]    Compiling gio v0.5.1
[INFO] [stderr]    Compiling cairo-rs v0.5.0
[INFO] [stderr]    Compiling gdk-pixbuf v0.5.0
[INFO] [stderr]    Compiling fragile v0.3.0
[INFO] [stderr]    Compiling gdk v0.9.0
[INFO] [stderr]    Compiling gtk v0.5.0
[INFO] [stderr]    Compiling glib-sys v0.7.0
[INFO] [stderr]    Compiling gobject-sys v0.7.0
[INFO] [stderr]    Compiling gio-sys v0.7.0
[INFO] [stderr]    Compiling pango-sys v0.7.0
[INFO] [stderr]    Compiling gdk-pixbuf-sys v0.7.0
[INFO] [stderr]    Compiling cairo-sys-rs v0.7.0
[INFO] [stderr]    Compiling atk-sys v0.7.0
[INFO] [stderr]    Compiling gdk-sys v0.7.0
[INFO] [stderr]    Compiling gtk-sys v0.7.0
[INFO] [stderr]    Compiling lazy_static v1.1.0
[INFO] [stderr]    Compiling rand v0.3.15
[INFO] [stderr] error: failed to run custom build command for `glib-sys v0.7.0`
[INFO] [stderr] 
[INFO] [stderr] Caused by:
[INFO] [stderr]   process didn't exit successfully: `C:\crater\target\debug\build\glib-sys-a84a5bc59b666b24\build-script-build` (exit code: 1)
[INFO] [stderr] --- stderr
[INFO] [stderr] MSVC target detected. If you are using the MSVC ABI rust build, please use the GNU ABI build instead.
[INFO] [stderr] 
[INFO] [stderr] warning: build failed, waiting for other jobs to finish...
[INFO] [stderr] error: build failed
[INFO] running `"docker" "inspect" "0eb3d40ab8ad3d3abd80804e2465b4be6b3be1fc740ed143679624d0fbb4d293"`
[INFO] running `"docker" "rm" "-f" "0eb3d40ab8ad3d3abd80804e2465b4be6b3be1fc740ed143679624d0fbb4d293"`
[INFO] [stdout] 0eb3d40ab8ad3d3abd80804e2465b4be6b3be1fc740ed143679624d0fbb4d293
